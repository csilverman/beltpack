
/*	UTILITIES
	=========
	
	These provide useful functions for writing your own mixins, as well as mixins for automating certain processes (generating responsive CSS from a map, for example). They're also used by mixins in Beltpack itself, so they should come first.
*/
	
/*
	As far as I can tell, there doesn't seem to be a function to get a key-value pair from a map based on index number. This might be clumsy, but it works: iterate across the map, incrementing a counter, until the counter matches the specified index, at which point you return the value.

*/



///	helper-classes
///	@param {map} $map 
///	@param {string} $property
/// As far as I can tell, there doesn't seem to be a function to get a key-value pair from a map based on index number. This might be clumsy, but it works: iterate across the map, incrementing a counter, until the counter matches the specified index, at which point you return the value.


@mixin helper-classes($map, $property, $settings:(item: 1)) {
	$selector_prefix: null;
	$defaults: (
		prefix: false,
	);

	$prefix: has-key($settings, $defaults, prefix);


	//	This generates a set of simple classes - typically helper classes - from a provided map.
	
	//	$map should look like this:
	
	//	$narrow-widths: (
	//		quarter: (33%, 25%),
	//		third: (50%, 40%),
	//		half: (100%, 52%),
	//		full: (100%)
	//	) !default;

	//	$property is whatever property we're trying to style; say, "width".
	//	So helper-classes($narrow-widths, width) would generate a series of 
	//	classes - width-quarter, width-third - with the "width" property set to
	//	the specified percentages. The values are lists, with each item corresponding
	//	to the position of a breakpoint defined in the central $breakpoints map, located
	//	in your _config file.
	
	@if $prefix {
		$selector_prefix: $prefix;
	}
	@else {
		$selector_prefix: $property;
	}

	
  	@each $key, $value in $map {
		$number-of-breakpoints: length($value);
		@for $i from 1 through $number-of-breakpoints {
			@if $i == 1 {
				.#{$selector_prefix}-#{$key} {
					#{$property}: nth($value, $i);
				}
			}
			// if not, wrap it in a media query
			@else {
				$the-breakpoint: get-map-value-by-index($breakpoints, $i);

				@media screen and (min-width: $the-breakpoint) {
					.#{$selector_prefix}-#{$key} {
						#{$property}: nth($value, $i);
					}
				}
			}
		}
	}
}



@mixin wide-widths($map) {


	//	This is identical to helper-classes(), except the values are
	//	wrapped in a breakout() mixin, which generates CSS to expand an element
	//	outside the max-width of a containing element. This would be used in situations
	//	where you wanted to designate a series of widths that would break out of the
	//	containing element: maybe a pullquote that's only a little wider than the
	//	container, and a large image that's much wider - maybe even full-bleed.
	//	I would have liked to work this functionality into helper-classes(), since they're
	//	so similar, but I don't want to sink a lot of time into eliminating one mixin and
	//	possibly making things more complicated. I'll think about this in the future.

	@each $key, $value in $map {
		$number-of-breakpoints: length($value);
		@for $i from 1 through $number-of-breakpoints {
			@if $i == 1 {
				.width-#{$key} {
					clear: both;
					@include breakout(nth($value, $i));
				}
			}
			// if not, wrap it in a media query
			@else {
				$the-breakpoint: get-map-value-by-index($breakpoints, $i);
				@media screen and (min-width: $the-breakpoint) {
					.width-#{$key} {
						@media screen and (min-width: nth($value, $i)) {
							@include breakout(nth($value, $i));
						}
					}
				}
			}
		}
	}
}



@mixin hideVisually() {
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	height: 1px;
	overflow: hidden;
	position: absolute;
	white-space: nowrap;
	width: 1px;
}



/*	FUNCTIONS
	========= */

@function get-map-value-by-index($map, $index) {
	/*
		#accepts:
			$map - a standard map
			$index - a number
		
		#expects: nothing
		
		#returns: a map value.
		
		#description: 
			This iterates across a map until it comes to the $indexth item. It then
			returns the value of that item.
	*/

  $i: 0;
  @each $key, $value in $map {
    $i: $i + 1;
    @if $i == $index {
      @return $value;
    }
  }
}


@function get-map-key-by-index($map, $index) {
	/*
		#accepts:
			$map - a standard map
			$index - a number
		
		#expects: nothing
		
		#returns: a map key.
		
		#description: 
			This iterates across a map until it comes to the $indexth item. It then
			returns the key of that item.
	*/

  $i: 0;
  @each $key, $value in $map {
    $i: $i + 1;

    @if $i == $index {
      @return $key;
    }
  }
}


// =============================================================================
// String Replace - https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function has-key($map, $defaults, $key) {
  @if map-has-key($map, $key) {
      @return map-get($map, $key);
    } @else {
      @return map-get($defaults, $key);
  }
}



@function makeSelectorsWithChildren($parentSelector, $children) {
    /*  makeSelectorsWithChildren()
        This function accepts a parent selector (.block) and a
        list of child elements (.block__content, .blockInner), and
        generates the following:
        
        .block,
        .block .block__content, 
        .block .blockInner
        
        I built this with helper classes in mind. A helper class like
        .padding:large might typically be applied to an element, but in
        systems like WordPress, the elements that actually contain the 
        content are child elements of the block that you'd apply the class
        to, so you'd need a set of selectors that address both situations.
        
        @param $parentSelector - string. 
        @param $children - list. All child elements that need
            to be included in the list of generated selectors.

    */

    $finalSeriesOfSelectors: '';
    @each $item in $children {
        //  For each one, set up a selector where the child is appended
        //  to the parent
        $selectorWithChildren: $parentSelector + ' ' + #{$item} + ', ';

        //  And then add the generated selector to 
        //  the full list of selectors.
        $finalSeriesOfSelectors: $finalSeriesOfSelectors + $selectorWithChildren;
    }
    //  Finally, add the selector for the main helper class
    //  to the list of selectors. This also means I don't have to
    //  worry about any end commas.
    $finalSeriesOfSelectors: $finalSeriesOfSelectors + $parentSelector;
    
    @return unquote($finalSeriesOfSelectors);
}




/*	The following are by Hugo Giraudel
*/

@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list) * -1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}



/*	MIXINS
	====== */





@mixin break($break, $min-or-max:'min') {
	/*	Sets up a media query. This expects that all of a project's breakpoints will
	    be stored in a map named $breakpoints, as follows:

$breakpoints: (
	"small": 30em,
	"medium": 50em,
	"large": 70em
);	
	*/

	$screen-size: map-get($breakpoints, $break);
	@media screen and (#{$min-or-max}-width: $screen-size) {
		@content
	}
}

//	The first value is always the base one, the one outside the media queries. This is what would typically be applied at the smallest screen size.
//	Issue: set it so it can handle if someone adds a fourth breakpoint parameter but there are only three breakpoints

@mixin prop($property, $values...) {
	/*
		#accepts:
			$property - a string indicating a CSS property: font-face, color, etc.
			$values - a series of parameters representing corresponding CSS values for each breakpoint.
		
		#usage:
			a {
				@include prop(font-size, 1.1em, 1em, 0.9em);
			}
			
			Result:
@media screen and (min-width: 40em) {
  a {
    font-size: 1.1em;
  }
}
@media screen and (min-width: 55em) {
  a {
    font-size: 1em;
  }
}
@media screen and (min-width: 70em) {
  a {
    font-size: 0.9em;
  }
}
			
			
		
		#expects:
			- All breakpoints need to be contained in a $breakpoints map. See readme.
		
		#returns: a map key.
		
		#description:
			This is a shorthand function
			
		#note:
			If you have multiple CSS properties you want to define 
	*/


  $i: 0;
  @each $value in $values {
    @if $i == 0 {
      #{$property}: $value;
    }
    @else {
      @media screen and (min-width: get-map-value-by-index($breakpoints, $i)) {
        #{$property}: $value;
      }
    }
    $i: $i+1;
  }
}








@mixin css($rules) {
	/*

	
	
	*/
	
  //  This is the main map parser.
  //  strategy: start with the first row, and grab the first column
  //  then move to the second row and grab the first column, etc

  $loop: length($breakpoints);

  @for $i from 1 through $loop {
    /*  For a style declaration, font-size: (1em, 0.9em, 0.8em), the first value
        is the base value. It shouldn't be wrapped in a media query. So if
        we're on 1, we know that we don't wrap it in a media query.
    */
    @if $i == 1 {

      @each $key, $value in $rules {
        //  get the list (the value)
        //  and then loop, ignoring all values but the ith value
        $count: 0;

        @each $list-item in $value {
          $count: $count + 1;

          @if $count == $i {
            //  this is the right one

            @if $key != 'use' {
              #{$key}: nth($value, $count);
            }
          }
        }
      }
    }
    @else {
      /*  This is where it gets a little tricky. $i has progressed past 1,
          which means we're past the base styling and should be wrapping any
          additional values in media queries. However, we're also using $i
          to determine which breakpoint we should use.
          
          If we grabbed the $ith value in the breakpoints map, we'd have already
          skipped past the first breakpoint. If our breakpoints are small,
          medium, and large, the resulting CSS would have styling for base
          values (no media query), and then CSS wrapped in a media query for
          the medium breakpoint. But what happened to the small breakpoint?
          
          So we have to cheat a little. We're still using $i to determine which
          value in a series of styles we should use, but when we use $i to refer to
          a breakpoint, we decrement it. So say $i is 2. We're grabbing the second
          value in the list of, say, font-sizes. However, we need an additional
          variable - something set to $i-1 - to get the appropriate breakpoint,
          which should be "small". Let's call that $j.

          (I think the best way to do this would be to start with 0 instead of 1;
          but Sass doesn't allow referring to the 0th element of a list of
          values.)
      */
      $j: $i - 1;
    $current-breakpoint: get-map-value-by-index($breakpoints, $j);

    @media screen and (min-width: $current-breakpoint) {
      @each $key, $value in $rules {
        //  get the list (the value)
        //  and then loop, ignoring all values but the ith value
        $count: 0;

        @each $list-item in $value {
          $count: $count + 1;

          @if $count == $i {
            //  this is the right one
            #{$key}: nth($value, $count);
          }
        }
      }
    }
  }
  }
  
}



