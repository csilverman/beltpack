/*	Animations
	========== */


@mixin anim-shift-in($translate) {
	@keyframes shift-in {
		0% {
			opacity: 0%;
			transform: unquote($translate);
		}
		100% {
			opacity: 100%;
			transform: translate(0);
		}
	}	
}

//	is it possibly rendering the animaton before anything else? so it never gets the updated settings?

@mixin shift($map:(item: 1)) {
	$defaults: (
		direction: right,
		distance: 1em,
		fill-mode: forwards,
		duration: 2s,
		delay: 0,
	);

	$delay: has-key($map, $defaults, delay);
	$direction: has-key($map, $defaults, direction);
	$distance: has-key($map, $defaults, distance);
	$fill-mode: has-key($map, $defaults, fill-mode);
	$duration: has-key($map, $defaults, duration);

	$translate: '';
	$sign: '';

	@if $direction == right or $direction == up {
		$sign: '-';
	}
	@if $direction == right or $direction == left {
		$translate: 'translateX(' + $sign + $distance + ')';
	}
	@else if $direction == up or $direction == down {
		$translate: 'translateY(' + $sign + $distance + ')';
	}

	@include anim-shift-in($translate);

	
	& {
		opacity: 0;
		font-size: $direction;
		transform: unquote($translate);
			font-size: $duration;
	}
	&.animation {
		animation-name: shift-in;
		animation-duration: $duration;
		animation-fill-mode: $fill-mode;
		font-size: $direction;
			font-size: $duration;
	}
}



@mixin fade($map:(item: 1)) {
	$defaults: (
		fill-mode: forwards,
		duration: 2s,
		trigger-class: null,
		delay: 0,
	);

	$delay: has-key($map, $defaults, delay);
	$fill-mode: has-key($map, $defaults, fill-mode);
	$duration: has-key($map, $defaults, duration);
	$trigger-class: has-key($map, $defaults, trigger-class);

	@keyframes fade-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}	
	
	& {
		opacity: 0;
	}
	&#{$trigger-class} {
		animation-delay: $delay;
		animation-name: fade-in;
		animation-duration: $duration;
		animation-fill-mode: $fill-mode;
	}
}



/*	Utilities
	---------
	Couple of tools for applying animations.

*/

@mixin anim-onload($name, $start-props, $end-props, $anim-props, $settings:(item: 1)) {

	$defaults: (
		root-selector: '',
	);

	$root-selector: has-key($settings, $defaults, root-selector);


  //  the basic animation
  @keyframes #{$name} {
    from {
      @each $key, $value in $start-props {
        #{$key}: #{$value};
      }
    }
    to {
      @each $key, $value in $end-props {
        #{$key}: #{$value};
      }
    }
  }


  //  This is the basic state: hidden by default.
  
  @each $key, $value in $start-props {
    #{$key}: #{$value};
  }


  //  The reveal animation is tied to the no-js class, because we don't
  //  want this to happen if JS is there. Removing that class keeps the
  //  element hidden, but removes the reveal animation, since we know we
  //  won't need it at this point.
  
  //  Note: this addresses a scenario where JS is turned off. If JS is on,
  //  but never adds the page-is-loaded class for some reason (something doesn't load,
  //  it's broken), the content won't be revealed. To address that situation, you'd
  //  need something that times out after a while and applies a "reveal" class.

  //  If there is no JS to reveal the animation,
  //  reveal everything shortly. I've hard-coded a value of 0.8s.
  //  Keep in mind that this is the amount of time it should take to remove the "no-js"
  //  class, *not* the time it takes for the page to load. If JS is running, removing the
  //  no-js class should happen in less than a second.
  @at-root.no-js#{$root-selector} & {
    animation-name: $name;
    animation-delay: 0.8s;
    animation-duration: 0.1s;
    animation-fill-mode: forwards;
  }

  //  If the JS loads, the no-js class is removed, 
  //  so the reveal animation never happens and the element
  //  continues to be hidden.
  @at-root.page-is-loaded#{$root-selector} & {
    animation-name: $name;

    @each $key, $value in $anim-props {
      #{$key}: #{$value};
    }

  }
}

$start: (
  opacity: 0,
  transform: translateX(-1em),
);
$end: (
  opacity: 1,
  transform: translateX(0),
);
$anim-props: (
  animation-duration: 1s,
  animation-fill-mode: forward,
);
$settings: (
  root-selector: '.home',
);

@mixin sequence($map:(item: 1)) {
	//	deprecated
	$defaults: (
		gap: 0.4s,
		offset: 0s,
		max-items: 20,
		type: animation,
	);
	
	$gap: has-key($map, $defaults, gap);
	$offset: has-key($map, $defaults, offset);
	$max-items: has-key($map, $defaults, max-items);
	$type: has-key($map, $defaults, type);

	@for $i from 1 through $max-items {
		&:nth-child(#{$i}) {
			#{$type}-delay: $offset + ($gap * $i);
		}
	}
}

@mixin bp-sequence($map:(item: 1)) {
	$defaults: (
		gap: 0.4s,
		offset: 0s,
		max-items: 20,
		type: animation,
	);
	
	$gap: has-key($map, $defaults, gap);
	$offset: has-key($map, $defaults, offset);
	$max-items: has-key($map, $defaults, max-items);
	$type: has-key($map, $defaults, type);

	@for $i from 1 through $max-items {
		&:nth-child(#{$i}) {
			#{$type}-delay: $offset + ($gap * $i);
		}
	}
}